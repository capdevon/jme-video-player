plugins {
    id 'application'
    id 'java-library'
    id 'org.openjfx.javafxplugin' version '0.0.10'
}

javafx {
    version = '17'
    modules = [
        'javafx.base',
        'javafx.controls',
        'javafx.fxml',
        'javafx.swing',
        'javafx.media'
    ]
}

mainClassName = 'mygame.Test_BrickWall'
description = 'JME Video Player'

// select one source-code (JDK) option
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

// select one version of the Engine:
ext.jmeVersion = '3.6.1-stable' // from mavenCentral

tasks.withType(JavaCompile) { // Java compile-time options:
    options.compilerArgs << '-Xdiags:verbose'
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
    options.encoding = 'UTF-8'
}

tasks.withType(JavaExec) { // Java runtime options:
    args = []
    classpath sourceSets.main.runtimeClasspath
    //debug true
    enableAssertions true
    //jvmArgs '-verbose:gc'
    //jvmArgs '-Xbatch'
    //jvmArgs '-Xms256m', '-Xmx256m'
    //jvmArgs '-XX:+PrintCompilation'
    //jvmArgs '-XX:+UseConcMarkSweepGC'
    jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=10'
    /*
     * Opens : allows a module to open one of its packages to a <target-module>, regardless of the module declaration.
     * Exports : exports other jfx module to the UN-NAMED modules
     * For more : https://docs.oracle.com/javase/9/migrate/toc.htm#JSMIG-GUID-7744EF96-5899-4FB2-B34E-86D49B2E89B6
     */
    jvmArgs = ['--add-opens=javafx.media/javafx.scene.media=ALL-UNNAMED',
               '--add-exports=javafx.graphics/com.sun.javafx.application=ALL-UNNAMED',
               '--add-exports=javafx.media/com.sun.media.jfxmedia=ALL-UNNAMED',
               '--add-exports=javafx.media/com.sun.media.jfxmedia.events=ALL-UNNAMED',
               '--add-exports=javafx.media/com.sun.media.jfxmedia.control=ALL-UNNAMED']
}

repositories {
    mavenCentral()
}

dependencies {
    // You can read more about how to add dependencies here:
    //   https://docs.gradle.org/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies

    // jMonkeyEngine
    implementation 'org.jmonkeyengine:jme3-core:' + jmeVersion
    implementation 'org.jmonkeyengine:jme3-desktop:' + jmeVersion
    implementation 'org.jmonkeyengine:jme3-effects:' + jmeVersion
    implementation 'org.jmonkeyengine:jme3-terrain:' + jmeVersion
    runtimeOnly    'org.jmonkeyengine:jme3-awt-dialogs:' + jmeVersion

    // Physics
    implementation 'com.github.stephengold:Minie:8.2.0+big4'

    // select one version of LWJGL
    // runtimeOnly 'org.jmonkeyengine:jme3-lwjgl:' + jmeVersion  // LWJGL 2.x
    runtimeOnly 'org.jmonkeyengine:jme3-lwjgl3:' + jmeVersion // LWJGL 3.x

    runtimeOnly 'org.jmonkeyengine:jme3-jogg:' + jmeVersion
    runtimeOnly 'org.jmonkeyengine:jme3-plugins:' + jmeVersion
    runtimeOnly 'org.jmonkeyengine:jme3-testdata:' + jmeVersion
}

// cleanup tasks
clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSOs')
task cleanDLLs(type: Delete) {
    delete fileTree(dir: '.', include: '*.dll')
}
task cleanDyLibs(type: Delete) {
    delete fileTree(dir: '.', include: '*.dylib')
}
task cleanLogs(type: Delete) {
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
task cleanSOs(type: Delete) {
    delete fileTree(dir: '.', include: '*.so')
}
